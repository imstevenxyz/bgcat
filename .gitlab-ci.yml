include:
  - project: orchestration.imsteven.xyz/cicd-templates
    ref: v1.0.0
    file:
      - /templates/buildah.yaml
      - /templates/gitlab.yaml

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID != null && $CI_MERGE_REQUEST_TITLE !~ /Draft:/
      changes:
        compare_to: main
        paths:
          - .gitlab-ci.yml
          - container/*
          - .cargo/
          - src/*
          - Cargo.toml
          - Cargo.lock
      variables:
        BUILDAH_IMAGE_TAG: "mr-${CI_MERGE_REQUEST_IID}"
    - if: $CI_COMMIT_TAG
      variables:
        BUILDAH_IMAGE_TAG: "$CI_COMMIT_TAG"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        BUILDAH_IMAGE_TAG: "$CI_COMMIT_BRANCH"

stages:
  - build
  - release

variables:
  BUILDAH_IMAGE_NAME: "$CI_PROJECT_PATH"

build-binary:
  stage: build
  image: rust:1.70.0-slim
  artifacts:
    expire_in: 30m
    paths:
      - ${CI_PROJECT_DIR}/builds/*/release/bgcat
  cache:
    key: cargo-build
    paths:
      - ${CI_PROJECT_DIR}/builds
      - ${CI_PROJECT_DIR}/cargo/registry
      - ${CI_PROJECT_DIR}/cargo/git
  variables:
    TARGETS: "x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu"
    CARGO_HOME: "${CI_PROJECT_DIR}/cargo"
  before_script:
    - apt-get update
    - apt-get install -y gcc-aarch64-linux-gnu
    - rustup target add $TARGETS
  script:
    - apt update && apt install -y gcc-aarch64-linux-gnu
    - rustup target add $TARGETS
    - |
      for TARGET in $TARGETS; do
        cargo build --release --target $TARGET --target-dir ${CI_PROJECT_DIR}/builds
      done

build-container:
  stage: build
  extends:
    - .buildah-manifest-build
  needs:
    - job: build-binary
      artifacts: true
  variables:
    BUILDAH_BUILD_PLATFORMS: "linux/amd64,linux/arm64"
    BUILDAH_BUILD_FILE: "container/Containerfile"
  before_script:
    - ln -sr builds/x86_64-unknown-linux-gnu builds/amd64
    - ln -sr builds/aarch64-unknown-linux-gnu builds/arm64

push-container:
  stage: release
  extends:
    - .buildah-manifest-push
  needs:
    - job: build-container
      artifacts: true

release-container:
  stage: release
  extends:
    - .buildah-manifest-push
  needs:
    - job: build-container
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    BUILDAH_PUSH_TAG: "$CI_COMMIT_TAG"
    BUILDAH_PUSH_LATEST: "true"

release-package:
  stage: release
  extends:
    - .gitlab-publish-package
  needs:
    - job: build-binary
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    ARCHITECTURES: "amd64,arm64"
    GITLAB_PUBLISH_PKG_FILES: "bgcat_${CI_COMMIT_TAG}_amd64.tar.gz,bgcat_${CI_COMMIT_TAG}_arm64.tar.gz"
    GITLAB_PUBLISH_PKG_VERSIONS: "$CI_COMMIT_TAG"
  before_script:
    - ln -s x86_64-unknown-linux-gnu builds/amd64
    - ln -s aarch64-unknown-linux-gnu builds/arm64
    - mkdir -p data/assets
    - |
      for ARCH in ${ARCHITECTURES//,/ }; do
        mv builds/$ARCH/release/bgcat .
        tar -czvf bgcat_${CI_COMMIT_TAG}_${ARCH}.tar.gz bgcat bgcat.toml LICENSE README.adoc static/ templates/ data/
      done

release-gitlab:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli
  needs:
    - job: release-package
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Creating release on gitlab for tag $CI_COMMIT_TAG"
  release:
    name: "BGCat Release $CI_COMMIT_TAG"
    tag_name: "$CI_COMMIT_TAG"
    description: "Release $CI_COMMIT_TAG"
    assets:
      links:
        - name: "BGCat_${CI_COMMIT_TAG}_amd64.tgz"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/bgcat/${CI_COMMIT_TAG}/bgcat_${CI_COMMIT_TAG}_amd64.tar.gz"
        - name: "BGCat_${CI_COMMIT_TAG}_arm64.tgz"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/bgcat/${CI_COMMIT_TAG}/bgcat_${CI_COMMIT_TAG}_arm64.tar.gz"
